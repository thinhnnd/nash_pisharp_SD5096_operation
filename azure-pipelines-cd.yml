# Azure DevOps CD Pipeline for Deployment
# Triggers when operation repo changes (version updates by Ops team)

name: CD-Deploy-$(Date:yyyyMMdd)-$(Rev:r)

# Trigger when this repository (operation repo) changes
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - environments/demo/values.yaml
    - argocd/nash-pisharp-demo.yaml
    exclude:
    - README.md
    - docs/*
    - '*.md'

variables:
  # Kubernetes configuration
  argoCDNamespace: 'argocd'
  
  # Build configuration
  vmImageName: 'ubuntu-latest'

stages:
- stage: Deploy
  displayName: 'Deploy Applications'
  jobs:
  - job: DeployToEnvironments
    displayName: 'Deploy to Kubernetes via ArgoCD'
    pool:
      name: 'Default'  # Use Default agent pool
      demands:
      - agent.name -equals THINHPC  # Optional: specify exact agent
    steps:
    # Checkout this repository (operation repo)
    - checkout: self
      displayName: 'Checkout operation repository'
    
    # Set Kubernetes context (optional - if using specific service connection)
    - task: Kubernetes@1
      displayName: 'Set Kubernetes Context'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aksPisharpDemo'  # Your AKS service connection name
        command: 'login'
    
    # Verify kubectl connectivity
    - task: PowerShell@2
      displayName: 'Verify Kubernetes Connectivity'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üîç Verifying Kubernetes connectivity..." -ForegroundColor Blue
          
          try {
            # Test cluster connectivity
            kubectl cluster-info --request-timeout=30s
            
            # Check ArgoCD namespace
            kubectl get ns argocd
            
            # Check if ArgoCD is running
            kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server
            
            Write-Host "‚úÖ Kubernetes connectivity verified!" -ForegroundColor Green
          }
          catch {
            Write-Error "‚ùå Kubernetes connectivity failed: $_"
            Write-Host "Please ensure:"
            Write-Host "1. Kubernetes service connection is properly configured"
            Write-Host "2. AKS cluster is accessible"
            Write-Host "3. ArgoCD is installed in 'argocd' namespace"
            exit 1
          }

    # Deploy to Demo environment
    - task: PowerShell@2
      displayName: 'Deploy to Demo Environment'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üöÄ Starting deployment to Demo environment..." -ForegroundColor Green
          
          try {
            # Apply demo application
            kubectl apply -f "$(Build.SourcesDirectory)/argocd/nash-pisharp-demo.yaml"
            Write-Host "‚úÖ ArgoCD application applied successfully!" -ForegroundColor Green
            
            # Wait a bit for ArgoCD to start syncing
            Write-Host "Waiting for ArgoCD to start syncing..." -ForegroundColor Blue
            Start-Sleep -Seconds 30
            
            # Check pod status instead of waiting for all to be ready
            Write-Host "Checking pod status..." -ForegroundColor Blue
            kubectl get pods -n nash-pisharp-demo -l app.kubernetes.io/name=nash-pisharp-app
            
            # Try to wait for pods with shorter timeout and continue on failure
            Write-Host "Attempting to wait for pods (will continue even if some fail)..." -ForegroundColor Blue
            
            $ErrorActionPreference = "Continue"
            
            # Wait for backend
            Write-Host "Waiting for backend pods..." -ForegroundColor Yellow
            kubectl wait --for=condition=Ready pod -l app.kubernetes.io/component=backend -n nash-pisharp-demo --timeout=180s
            
            # Wait for frontend  
            Write-Host "Waiting for frontend pods..." -ForegroundColor Yellow
            kubectl wait --for=condition=Ready pod -l app.kubernetes.io/component=frontend -n nash-pisharp-demo --timeout=180s
            
            # Wait for mongodb
            Write-Host "Waiting for mongodb pods..." -ForegroundColor Yellow
            kubectl wait --for=condition=Ready pod -l app.kubernetes.io/component=mongodb -n nash-pisharp-demo --timeout=180s
            
            $ErrorActionPreference = "Stop"
            
            Write-Host "‚úÖ Demo deployment process completed!" -ForegroundColor Green
          }
          catch {
            Write-Warning "‚ö†Ô∏è Some deployment steps had issues, but continuing: $_"
            Write-Host "Checking current pod status..." -ForegroundColor Yellow
            kubectl get pods -n nash-pisharp-demo -l app.kubernetes.io/name=nash-pisharp-app
          }

    # Verify deployment status
    - task: PowerShell@2
      displayName: 'Verify Demo Deployment Status'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üîç Verifying demo deployment status..." -ForegroundColor Blue
          
          # Check demo environment
          Write-Host "Demo Environment Status:" -ForegroundColor Yellow
          Write-Host "All pods in nash-pisharp-demo namespace:" -ForegroundColor Cyan
          kubectl get pods -n nash-pisharp-demo -l app.kubernetes.io/name=nash-pisharp-app -o wide
          
          Write-Host "`nServices in nash-pisharp-demo namespace:" -ForegroundColor Cyan
          kubectl get svc -n nash-pisharp-demo
          
          # Check pod readiness summary
          Write-Host "`nPod Readiness Summary:" -ForegroundColor Cyan
          $readyPods = kubectl get pods -n nash-pisharp-demo -l app.kubernetes.io/name=nash-pisharp-app --no-headers | Where-Object { $_ -match "1/1.*Running" }
          $totalPods = kubectl get pods -n nash-pisharp-demo -l app.kubernetes.io/name=nash-pisharp-app --no-headers
          
          $readyCount = if ($readyPods) { ($readyPods | Measure-Object).Count } else { 0 }
          $totalCount = if ($totalPods) { ($totalPods | Measure-Object).Count } else { 0 }
          
          Write-Host "Ready pods: $readyCount / $totalCount" -ForegroundColor $(if ($readyCount -eq $totalCount) { "Green" } else { "Yellow" })
          
          # Show any pods that are not ready
          $notReadyPods = kubectl get pods -n nash-pisharp-demo -l app.kubernetes.io/name=nash-pisharp-app --no-headers | Where-Object { $_ -notmatch "1/1.*Running" }
          if ($notReadyPods) {
            Write-Host "`nPods not ready yet:" -ForegroundColor Yellow
            $notReadyPods | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
            Write-Host "Note: These pods may still be starting up. Check ArgoCD UI for detailed status." -ForegroundColor Cyan
          }
          
          Write-Host "üéâ Demo deployment verification completed!" -ForegroundColor Green

    # Deployment summary
    - script: |
        echo "üìã DEMO DEPLOYMENT SUMMARY"
        echo "=========================="
        echo "‚úÖ CD Pipeline executed successfully"
        echo "üéØ Environment: Demo only"
        echo "üåø Branch: $(Build.SourceBranchName)"
        echo "üìù Commit: $(Build.SourceVersionMessage)"
        echo "üïí Timestamp: $(date)"
        echo ""
        echo "üöÄ Application deployed: nash-pisharp-demo"
        echo "üîó Access via LoadBalancer service in nash-pisharp-demo namespace"
      displayName: 'Demo Deployment Summary'